window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "slvrov_tools", "modulename": "slvrov_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.i2c_device", "modulename": "slvrov_tools.i2c_device", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device", "kind": "class", "doc": "<p>A class for communicating with I2C devices using the smbus2 library.</p>\n\n<p>This class provides methods to read and write one or two bytes from/to registers on an I2C device.\nIt handles bus management and ensures proper cleanup on exit or interruption.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>address (int):</strong>  I2C address of the device.</li>\n<li><strong>bus_number (int):</strong>  The I2C bus number (default is 1).</li>\n<li><strong>bus (smbus2.SMBus):</strong>  The underlying SMBus object for communication.</li>\n<li><strong>closed (bool):</strong>  Indicates whether the I2C connection is closed.</li>\n</ul>\n"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.__init__", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.__init__", "kind": "function", "doc": "<p>Initializes an I2C_Device instance and opens a connection to the specified I2C bus.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>address (int):</strong>  The I2C address of the device.</li>\n<li><strong>bus (int, optional):</strong>  The I2C bus number to use (default is 1).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.address", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.bus_number", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.bus_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.bus", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.bus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.closed", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.closed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.write_byte", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.write_byte", "kind": "function", "doc": "<p>Writes one byte to a given register.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>register (int):</strong>  A valid 8-bit register address on the I2C device.</li>\n<li><strong>value (int):</strong>  Numerical 8-bit value to write to the register.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If register or value exceed 8-bit limits.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.read_byte", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.read_byte", "kind": "function", "doc": "<p>Reads one byte from a given register on the I2C device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>register (int):</strong>  The register number to read from.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bytes: The byte (0-255) read from the register.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If register exceeds 8-bit limits.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.write_two_bytes", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.write_two_bytes", "kind": "function", "doc": "<p>Writes two bytes (a word) to a given register.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>register (int):</strong>  A valid 16-bit register address on the I2C device.</li>\n<li><strong>value (int):</strong>  Numerical 16-bit value to write to the register.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If register or value exceed 16-bit limits.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.read_two_bytes", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.read_two_bytes", "kind": "function", "doc": "<p>Reads two bytes (a word) from a given register on the I2C device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>register (int):</strong>  The register number to read from.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bytes: The 16-bit value (0-65535) read from the register.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If register exceeds 8-bit limits.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.close", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.close", "kind": "function", "doc": "<p>Closes the I2C connection if it is not already closed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.i2c_device.I2C_Device.open", "modulename": "slvrov_tools.i2c_device", "qualname": "I2C_Device.open", "kind": "function", "doc": "<p>Reopens the I2C connection if it has been closed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>bus_number (int | None):</strong>  Optional, default is None. If None, reuses the original bus number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bus_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.joystick", "modulename": "slvrov_tools.joystick", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.joystick.SDL2_Joystick", "modulename": "slvrov_tools.joystick", "qualname": "SDL2_Joystick", "kind": "function", "doc": "<p>Initialises a joystick based on the SLD2 library.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The SDL2 joystick object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  if no joysticks are connected.</li>\n<li><strong>Exception:</strong>  if there is a problme reading the joystick.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.legacy_pca9685", "modulename": "slvrov_tools.legacy_pca9685", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC", "kind": "class", "doc": "<p>Class allowing basic use of the PCA9685 16-Channel, 12-bit PWM Driver</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>pwm_frequency (int):</strong>  the frequency (Hz) that the driver will output; max is 25_000_000</li>\n<li><strong>address (int):</strong>  I2C address of the driver; default is 0x40</li>\n<li><strong>bus (int):</strong>  I2C bus number; default is 1</li>\n<li><strong>pwm_time (int):</strong>  the time (\u03bcs) it takes to complete one PWM cycle at pwm_frequency</li>\n</ul>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>write(register, value): writes a value to a given register on the PCA9685\n  clear(): clears the MODE1 register, allowing the oscillator to start\n  write_prescale(): calculates and writes the prescale that lowers the driver's clock frequency to the pwm frequency\n  write_duty_cycle(pin_number, pulse_length, start): writes when the \"on\" pulse starts and stops; default start is 0</p>\n</blockquote>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.__init__", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.__init__", "kind": "function", "doc": "<p>Initializes PCA9685_BASIC object attributes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pwm_frequency (int):</strong>  the frequency (Hz) that the driver will output; max is 25_000_000</li>\n<li><strong>address (int):</strong>  I2C address of the driver; default is 0x40</li>\n<li><strong>bus (int):</strong>  I2C bus number; default is 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pwm_frequency</span>, </span><span class=\"param\"><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mi\">64</span>, </span><span class=\"param\"><span class=\"n\">bus</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.bus", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.bus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.address", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.pwm_frequency", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.pwm_frequency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.pwm_time", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.pwm_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.write", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.write", "kind": "function", "doc": "<p>Writes a value to a given register on the PCA9685</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>register (int):</strong>  a valid register address on the PCA9685 driver</li>\n<li><strong>value (int):</strong>  numerical value to write to the register - only accepts whole numbers</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">register</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.clear", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.clear", "kind": "function", "doc": "<p>Clears the MODE1 register, turning off the SLEEP bit and allowing the oscillator to start</p>\n\n<p>Takes no arguments (other than self object)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.write_prescale", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.write_prescale", "kind": "function", "doc": "<p>Calculates and writes the prescale that lowers the driver's clock frequency to the pwm frequency</p>\n\n<p>Takes no arguments (other than self object)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.legacy_pca9685.PCA9685_BASIC.write_duty_cycle", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "PCA9685_BASIC.write_duty_cycle", "kind": "function", "doc": "<p>Writes when the \"on\" pulse starts and stops; default start is 0</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pin_number (int):</strong>  the desired pin number of the ouput on the PCA9685 driver, numbers 0 - 15</li>\n<li><strong>pulse_length (float):</strong>  the length of the \"on\" part of the PWM cycle (\u03bcs)</li>\n<li><strong>start (int):</strong>  how long into the PWM cycle to start the \"on\" signal (\u03bcs); default is 0</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pin_number</span>, </span><span class=\"param\"><span class=\"n\">pulse_length</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo", "kind": "class", "doc": "<p>Class allowing the control over a servo compatible with the PCA9685 driver</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>pin (int):</strong>  the pin of the PCA8695 that the servo is on (0 - 15)</li>\n<li><strong>min_time (float):</strong>  the length of the \"on\" pulse when the servo is at its minimum rotation (\u03bcs)</li>\n<li><strong>max_time (float):</strong>  the length of the \"on\" pulse when the servo is at its maximum rotation (\u03bcs)</li>\n<li><strong>max_rotation (int):</strong>  the rotational range of the servo (degrees); default is 180\u02da</li>\n<li><strong>driver (Legacy_PCA9685_BASIC):</strong>  PCA9685 driver being used to control the servo</li>\n</ul>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>rotate(degrees): rotate servo to specified degrees\n  stop(): terminates duty cycle to stop servo rotating - can be moved again using rotate</p>\n</blockquote>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.__init__", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.__init__", "kind": "function", "doc": "<p>Initializes Servo object with its attributes and sets up prescale</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pin (int):</strong>  the pin of the PCA8695 driver that the servo is on (0 - 15)</li>\n<li><strong>min_time (float):</strong>  the length of the \"on\" pulse when the servo is at its minimum rotation (\u03bcs)</li>\n<li><strong>max_time (float):</strong>  the length of the \"on\" pulse when the servo is at its maximum rotation (\u03bcs)</li>\n<li><strong>max_rotation (int):</strong>  the rotational range of the servo (degrees); default is 180\u02da</li>\n<li><strong>pwm_frequency (int):</strong>  the frequency (Hz) that the driver will output; max is 25_000_000</li>\n<li><strong>address (int):</strong>  I2C address of the PCA9685; default is 0x40</li>\n<li><strong>bus (int):</strong>  I2C bus number of the driver; default is 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pin</span>,</span><span class=\"param\">\t<span class=\"n\">min_time</span>,</span><span class=\"param\">\t<span class=\"n\">max_time</span>,</span><span class=\"param\">\t<span class=\"n\">max_rotation</span><span class=\"o\">=</span><span class=\"mi\">180</span>,</span><span class=\"param\">\t<span class=\"n\">pwm_frequency</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">bus</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.pin", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.pin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.min_time", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.min_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.max_time", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.max_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.max_rotation", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.max_rotation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.driver", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.driver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.rotate", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.rotate", "kind": "function", "doc": "<p>Rotate servo to specified degrees</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>degrees (float):</strong>  the desired amount of rotation (degrees\u02da)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">degrees</span>, </span><span class=\"param\"><span class=\"n\">wait_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.legacy_pca9685.Servo.stop", "modulename": "slvrov_tools.legacy_pca9685", "qualname": "Servo.stop", "kind": "function", "doc": "<p>Terminates duty cycle to stop servo rotating\nServo can be \"reconnected\" and moved again by calling rotate(degrees)</p>\n\n<p>Takes no arguments (other than self object)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools", "modulename": "slvrov_tools.math_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.math_tools.diff", "modulename": "slvrov_tools.math_tools", "qualname": "diff", "kind": "function", "doc": "<p>Gets the difference between two values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  A number.</li>\n<li><strong>b (float):</strong>  Another number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The difference of a and b.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools.rotate_point", "modulename": "slvrov_tools.math_tools", "qualname": "rotate_point", "kind": "function", "doc": "<p>Rotates a point about the orgin</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>point (tuple):</strong>  An (x, y) coordinate tuple.</li>\n<li><strong>angle (float):</strong>  The rotation angle in degrees or radians.</li>\n<li><strong>form (str):</strong>  'd' for an input angle in degrees, 'r' for radians. Default is 'd'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: rotated point rounded to 5 decimal places.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">form</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;d&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools.adjust_to_linear_range", "modulename": "slvrov_tools.math_tools", "qualname": "adjust_to_linear_range", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inpt</span>, </span><span class=\"param\"><span class=\"n\">from_min</span>, </span><span class=\"param\"><span class=\"n\">from_max</span>, </span><span class=\"param\"><span class=\"n\">to_min</span>, </span><span class=\"param\"><span class=\"n\">to_max</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools.Circle", "modulename": "slvrov_tools.math_tools", "qualname": "Circle", "kind": "class", "doc": "<p>A class representing a circle defined by its center coordinates and radius.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  The x-coordinate of the circle's center.</li>\n<li><strong>y (float):</strong>  The y-coordinate of the circle's center.</li>\n<li><strong>r (float):</strong>  The radius of the circle.</li>\n</ul>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>rotate_point_to_other(circle_b: Circle, point: tuple, angle: float, form: str='d') -> tuple: translates a point on this circle to circle_b, rotating by a given angle</p>\n</blockquote>\n"}, {"fullname": "slvrov_tools.math_tools.Circle.__init__", "modulename": "slvrov_tools.math_tools", "qualname": "Circle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "slvrov_tools.math_tools.Circle.x", "modulename": "slvrov_tools.math_tools", "qualname": "Circle.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "slvrov_tools.math_tools.Circle.y", "modulename": "slvrov_tools.math_tools", "qualname": "Circle.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "slvrov_tools.math_tools.Circle.r", "modulename": "slvrov_tools.math_tools", "qualname": "Circle.r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "slvrov_tools.math_tools.Circle.rotate_point_to_other", "modulename": "slvrov_tools.math_tools", "qualname": "Circle.rotate_point_to_other", "kind": "function", "doc": "<p>Transforms a point on circle_a to a corresponding point on circle_b using\ntranslation, scaling, and rotation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>point (tuple):</strong>  The (x, y) point on circle_a.</li>\n<li><strong>circle_a (Circle):</strong>  Source circle.</li>\n<li><strong>circle_b (Circle):</strong>  Destination circle.</li>\n<li><strong>angle (float):</strong>  rotation angle in degrees or radians.</li>\n<li><strong>form (str):</strong>  'd' for an input angle in degrees, 'r' for radians. Default is 'd'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Transformed (x, y) point on circle_b.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">circle_b</span>, </span><span class=\"param\"><span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">form</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;d&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools.clamp_to_circle", "modulename": "slvrov_tools.math_tools", "qualname": "clamp_to_circle", "kind": "function", "doc": "<p>Clamps a given point to a given circle.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>point (tuple):</strong>  An (x, y) coordinate tuple.</li>\n<li><strong>circle (Circle):</strong>  The circle to clamp point to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Clamped (x, y) coordinate rounded to 5 decimal places.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">circle</span><span class=\"p\">:</span> <span class=\"n\">slvrov_tools</span><span class=\"o\">.</span><span class=\"n\">math_tools</span><span class=\"o\">.</span><span class=\"n\">Circle</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools.Ranged_Int", "modulename": "slvrov_tools.math_tools", "qualname": "Ranged_Int", "kind": "class", "doc": "<p>An integer value that is constrained within a defined range [MIN, MAX].</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>MIN (int):</strong>  The minimum allowable value.</li>\n<li><strong>MAX (int):</strong>  The maximum allowable value.</li>\n<li><strong>current (int):</strong>  The current value, always within [MIN, MAX].</li>\n</ul>\n"}, {"fullname": "slvrov_tools.math_tools.Ranged_Int.__init__", "modulename": "slvrov_tools.math_tools", "qualname": "Ranged_Int.__init__", "kind": "function", "doc": "<p>Initializes a Ranged_Int object with bounds and an initial value.</p>\n\n<p>NOTE: Adding and subtracting does not return a new Ranged_Int object!</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min (int):</strong>  Minimum allowable value.</li>\n<li><strong>max (int):</strong>  Maximum allowable value.</li>\n<li><strong>initial (int):</strong>  Starting value, should be within the range.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">min</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"nb\">max</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "slvrov_tools.math_tools.Ranged_Int.MIN", "modulename": "slvrov_tools.math_tools", "qualname": "Ranged_Int.MIN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.math_tools.Ranged_Int.MAX", "modulename": "slvrov_tools.math_tools", "qualname": "Ranged_Int.MAX", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.math_tools.Ranged_Int.current", "modulename": "slvrov_tools.math_tools", "qualname": "Ranged_Int.current", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.math_tools.Ranged_Int.set_value", "modulename": "slvrov_tools.math_tools", "qualname": "Ranged_Int.set_value", "kind": "function", "doc": "<p>Sets the current value, clamping it within the defined range.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The value to set. Will be clamped to [MIN, MAX].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.math_tools.map_point_between_circles", "modulename": "slvrov_tools.math_tools", "qualname": "map_point_between_circles", "kind": "function", "doc": "<p>Transforms a point on circle_a to a corresponding point on circle_b using\ntranslation, scaling, and rotation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>point (tuple):</strong>  The (x, y) point on circle_a.</li>\n<li><strong>circle_a (Circle):</strong>  Source circle.</li>\n<li><strong>circle_b (Circle):</strong>  Destination circle.</li>\n<li><strong>angle (float):</strong>  rotation angle in degrees or radians.</li>\n<li><strong>form (str):</strong>  'd' for an input angle in degrees, 'r' for radians. Default is 'd'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Transformed (x, y) point on circle_b.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">circle_a</span><span class=\"p\">:</span> <span class=\"n\">slvrov_tools</span><span class=\"o\">.</span><span class=\"n\">math_tools</span><span class=\"o\">.</span><span class=\"n\">Circle</span>,</span><span class=\"param\">\t<span class=\"n\">circle_b</span><span class=\"p\">:</span> <span class=\"n\">slvrov_tools</span><span class=\"o\">.</span><span class=\"n\">math_tools</span><span class=\"o\">.</span><span class=\"n\">Circle</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">form</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;d&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.misc_tools", "modulename": "slvrov_tools.misc_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.misc_tools.is_raspberry_pi", "modulename": "slvrov_tools.misc_tools", "qualname": "is_raspberry_pi", "kind": "function", "doc": "<p>Discovers if the current device is a raspberry pi.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if raspberry pi, False is not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.misc_tools.cleanup_functions_variable_that_no_one_will_ever_overwrite", "modulename": "slvrov_tools.misc_tools", "qualname": "cleanup_functions_variable_that_no_one_will_ever_overwrite", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "slvrov_tools.misc_tools.at_interrupt", "modulename": "slvrov_tools.misc_tools", "qualname": "at_interrupt", "kind": "function", "doc": "<p>Adds function to a list to be exectuted at CTL-C.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (function):</strong>  The function to be run at CTL-C.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.misc_tools.interrupt_exec", "modulename": "slvrov_tools.misc_tools", "qualname": "interrupt_exec", "kind": "function", "doc": "<p>Runs at CTL-C and executes all of the functinos submitted by at_interrupt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">signum</span>, </span><span class=\"param\"><span class=\"n\">frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.misc_tools.setup_interrupt_handlers", "modulename": "slvrov_tools.misc_tools", "qualname": "setup_interrupt_handlers", "kind": "function", "doc": "<p>Sets up the signal handers. Allows it so be called non-intrusively by the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.misc_tools.at_exit", "modulename": "slvrov_tools.misc_tools", "qualname": "at_exit", "kind": "function", "doc": "<p>Allows a function to be run when the program terminates smoothly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (function):</strong>  The function to be exectued.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.misc_tools.fits_in_bits", "modulename": "slvrov_tools.misc_tools", "qualname": "fits_in_bits", "kind": "function", "doc": "<p>Determines if a given int i fits into a given amount of bits.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>i (int):</strong>  The integer in question.</li>\n<li><strong>bits (int):</strong>  The given amount of bits.</li>\n<li><strong>signed (bool | None):</strong>  Is the int signed. Default is None, in which case both are tested.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if i can be represented by the given number of bits, False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">bits</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">signed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools", "modulename": "slvrov_tools.network_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.protocols_by_transport", "modulename": "slvrov_tools.network_tools", "qualname": "protocols_by_transport", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;raw&#x27;: &lt;SocketKind.SOCK_RAW: 3&gt;, &#x27;tcp&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;http&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;https&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;ftp&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;smtp&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;imap&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;pop3&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;ssh&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;telnet&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;bgp&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;irc&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;ldap&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;smb&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;rdp&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;nntp&#x27;: &lt;SocketKind.SOCK_STREAM: 1&gt;, &#x27;udp&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;dhcp&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;tftp&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;snmp&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;ntp&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;rip&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;rtp&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;syslog&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;mdns&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;llmnr&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;, &#x27;quic&#x27;: &lt;SocketKind.SOCK_DGRAM: 2&gt;}"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator", "kind": "class", "doc": "<p>A class to manage socket-based communication using multithreading, with protocol abstraction for various common \nnetwork protocols. Designed for both connection-oriented (TCP) and connectionless (UDP) communication patterns.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>IP (str):</strong>  Local IP address the socket binds to.</li>\n<li><strong>port (int):</strong>  Local port number to bind the socket to.</li>\n<li><strong>protocols_by_transport (dict):</strong>  Mapping of protocol names (e.g., 'tcp', 'udp', 'http') to socket types.</li>\n<li><strong>protocol (str):</strong>  The specified protocol in lowercase, used to resolve socket type.</li>\n<li><strong>communication_type (int):</strong>  Socket type (e.g., socket.SOCK_STREAM) based on protocol.</li>\n<li><strong>packet_handler (Callable):</strong>  Function used to handle received packets. Defaults to an internal test handler.</li>\n<li><strong>recieved_count (int):</strong>  Counter tracking the number of packets received when using the test handler.</li>\n<li><strong>socket (socket.socket):</strong>  The underlying bound socket object.</li>\n<li><strong>bound (bool):</strong>  Boolean flag indicating if the socket is currently open and bound.</li>\n<li><strong>to_IP (str):</strong>  Remote IP address to connect to (used in client mode).</li>\n<li><strong>to_port (int):</strong>  Remote port number to connect to.</li>\n<li><strong>connected (bool):</strong>  Flag indicating if a connection to a remote host is active.</li>\n<li><strong>executor (ThreadPoolExecutor):</strong>  Thread pool used to spawn packet handler threads.</li>\n</ul>\n\n<h6 id=\"key-methods\">Key Methods:</h6>\n\n<blockquote>\n  <p>connect_to(to_IP, to_port) -> None: Establishes a connection to a remote IP and port.\n  disconnect() -> None: Disconnects from the remote endpoint by nulling the connection.\n  reconnect() -> None: Re-establishes the most recent connection (after disconnect).\n  spawn_handler_thread(*args) -> None: Spawns a thread to handle incoming packet data using the assigned handler.\n  set_socket() -> socket.socket: Creates and binds a socket with the specified communication type.\n  open(IP=None, port=None) -> None: Opens (or re-opens) the socket on the given or previous IP/port.\n  close() -> None: Closes the socket if currently bound.\n  test_packet_handler(*args) -> str: Default handler that prints packet details and increments <code>recieved_count</code>.</p>\n</blockquote>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.__init__", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.__init__", "kind": "function", "doc": "<p>Initializes the network communicator with socket parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>IP (str):</strong>  Local IP address to bind to.</li>\n<li><strong>port (int):</strong>  Local port to bind to.</li>\n<li><strong>protocol (str):</strong>  Protocol name (e.g., 'tcp', 'udp', 'http').</li>\n<li><strong>packet_handler (Callable | str):</strong>  Handler for incoming packets or 'test' for default.</li>\n<li><strong>max_threads (int):</strong>  Maximum number of handler threads, set to 10 as default</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">packet_handler</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;test&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span>)</span>"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.IP", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.IP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.port", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.protocols_by_transport", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.protocols_by_transport", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.protocol", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.protocol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.communication_type", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.communication_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.recieved_count", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.recieved_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.socket", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.socket", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.bound", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.bound", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.to_IP", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.to_IP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.to_port", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.to_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.connected", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.connected", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.executor", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.executor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.test_packet_handler", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.test_packet_handler", "kind": "function", "doc": "<p>Default packet handler used for testing. Prints information about the packet just recieved.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*args:</strong>  Tuple of (data, address) or just (data,) depending on protocol context.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>description (str): information printed about recieved packet</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If len(args) is not 1 or 2</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.connect_to", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.connect_to", "kind": "function", "doc": "<p>Connects the socket to a remote IP and port.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>to_IP (str):</strong>  Destination IP address.</li>\n<li><strong>to_port (int):</strong>  Destination port number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">to_IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">to_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.disconnect", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.disconnect", "kind": "function", "doc": "<p>Disconnects from the current remote endpoint by connecting to a null address.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.reconnect", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.reconnect", "kind": "function", "doc": "<p>Reconnects to the most recent remote IP and port (set using the 'connect' method) after disconnect</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.spawn_handler_thread", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.spawn_handler_thread", "kind": "function", "doc": "<p>Spawns a new thread to handle packets using the packet_handler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*arguments:</strong>  Arguments to pass to the packet handler function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">arguments</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.set_socket", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.set_socket", "kind": "function", "doc": "<p>Creates and binds a socket to the specified local IP and port.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>self.socket (socket.socket): The bound socket object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.close", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.close", "kind": "function", "doc": "<p>Closes the local socket if it is currently bound.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.Network_Communicator.open", "modulename": "slvrov_tools.network_tools", "qualname": "Network_Communicator.open", "kind": "function", "doc": "<p>Opens a local socket with provided IP/port or reopens the socket using last bound IP/port.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>IP (str, optional):</strong>  New IP address to bind to.</li>\n<li><strong>port (int, optional):</strong>  New port number to bind to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator", "kind": "class", "doc": "<p>A specialized subclass of Network_Communicator for handling UDP-based network communication.</p>\n\n<p>This communicator supports sending and receiving UDP packets using both connected and unconnected socket modes.\nIt inherits threading, socket setup, and packet handling from the base class and adds UDP-specific transmission \nand reception capabilities.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>IP (str):</strong>  Local IP address to bind to.</li>\n<li><strong>port (int):</strong>  Local port number for communication.</li>\n<li><strong>protocol (str):</strong>  Always set to 'udp' for this subclass.</li>\n<li><strong>packet_handler (Callable):</strong>  Function used to process received packets.</li>\n<li><strong>recieved_count (int):</strong>  Counter that tracks how many packets have been received.</li>\n<li><strong>socket (socket.socket):</strong>  The UDP socket object used for communication.</li>\n<li><strong>connected (bool):</strong>  Indicates if the socket is connected to a specific remote host.</li>\n<li><strong>executor (ThreadPoolExecutor):</strong>  Thread pool used to execute packet handler functions concurrently.</li>\n</ul>\n\n<h6 id=\"key-methods\">Key Methods:</h6>\n\n<blockquote>\n  <p>sendto(data, to_IP, to_port) -> None:\n      Sends a UDP packet to a specific remote IP and port.</p>\n  \n  <p>send(data) -> None:\n      Sends a UDP packet using a previously connected socket.</p>\n  \n  <p>send_queue(data, IP=\"\", port=-1) -> None:\n      Sends multiple UDP packets either to a connected host or to a provided destination.</p>\n  \n  <p>recieve_all(count=\"continual\", buffer_size=1521, threaded=False) -> None:\n      Listens for incoming packets from any address and optionally handles them in threads.</p>\n  \n  <p>recieve_from(IP=None, port=None, count=\"continual\", buffer_size=1521, threaded=False) -> None:\n      Receives packets from a specific IP/port or a connected host, using a packet handler that \n      accepts only the raw data.</p>\n</blockquote>\n", "bases": "Network_Communicator"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator.__init__", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator.__init__", "kind": "function", "doc": "<p>Initializes the UDP_Communicator with a bound UDP socket and packet handler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>IP (str):</strong>  The local IP address to bind the socket to.</li>\n<li><strong>port (int):</strong>  The local port number to bind the socket to.</li>\n<li><strong>packet_handler (Callable):</strong>  Function to handle received packets.</li>\n<li><strong>max_threads (int, optional):</strong>  Maximum number of threads for handling packets. Defaults to 10.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">packet_handler</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;test&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span>)</span>"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator.sendto", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator.sendto", "kind": "function", "doc": "<p>Sends a UDP packet to a specific destination IP and port.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (bytes | bytearray):</strong>  The packet data to send.</li>\n<li><strong>to_IP (str):</strong>  The target IP address.</li>\n<li><strong>to_port (int):</strong>  The target port number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span>, </span><span class=\"param\"><span class=\"n\">to_IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">to_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator.send", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator.send", "kind": "function", "doc": "<p>Sends a UDP packet using the connected socket.</p>\n\n<p>This method assumes that the socket has already been connected using <code>connect_to</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (bytes | bytearray):</strong>  The packet data to send.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the socket is not connected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator.send_queue", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator.send_queue", "kind": "function", "doc": "<p>Sends a sequence of UDP packets either to a connected peer or to the specified destination.</p>\n\n<p>If the communicator is connected, packets are sent using the <code>send</code> method.\nOtherwise, a destination IP and port must be provided to use <code>sendto</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (List[bytes | bytearray]):</strong>  A list of packet data to send.</li>\n<li><strong>IP (str, optional):</strong>  Target IP address if not connected. Defaults to \"\".</li>\n<li><strong>port (int, optional):</strong>  Target port if not connected. Defaults to -1.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If no connection is active and no destination IP/port is provided.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator.recieve_all", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator.recieve_all", "kind": "function", "doc": "<p>Recieves packets from the socket</p>\n\n<p>NOTE: Packet handler must be configured to accept a bytes 'data' AND an str 'address' argument</p>\n\n<p>NOTE: This communicator will disconnect from any connected peers to recieve using this function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int, optional):</strong>  How many packets revice_from should handle before exiting. Default is \"continual\" for continuous recieving</li>\n<li><strong>buffer_size (int, optional):</strong>  The largest packet (in bytes) that can be recieved. Default is 1472</li>\n<li><strong>threaded (bool, optional):</strong>  Threads will be spawned if true. Default is False</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If an error occurs while receiving data. The socket will be closed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;continual&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1472</span>,</span><span class=\"param\">\t<span class=\"n\">threaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.network_tools.UDP_Communicator.recieve_from", "modulename": "slvrov_tools.network_tools", "qualname": "UDP_Communicator.recieve_from", "kind": "function", "doc": "<p>Recieves packets from a specified or connected IP address and port</p>\n\n<p>NOTE: Packet handler must be configured to accept ONLY a bytes 'data' argument</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>IP (str, optional):</strong>  IP address to connect to. Defaults to connected socket IP if None. Is set to None by default</li>\n<li><strong>port (int, optional):</strong>  Port number to connect to. Defaults to connected socket port if None. Is set to None by default</li>\n<li><strong>count (int | str, optional):</strong>  Number of packets to receive. Use \"continual\" to receive indefinitely. Is \"continual\" by default</li>\n<li><strong>buffer_size (int, optional):</strong>  Maximum size of each packet in bytes. Defaults to 1472.</li>\n<li><strong>threaded (bool, optional):</strong>  If True, each packet is handled in a separate thread. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If no destination is provided and was not connected using the 'connect_to' or 'reconnect' methods</li>\n<li><strong>Exception:</strong>  If an error occurs during packet reception. The socket will be closed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;continual&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1472</span>,</span><span class=\"param\">\t<span class=\"n\">threaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.pca9685", "modulename": "slvrov_tools.pca9685", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor.__init__", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">min_duty</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_duty</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">pins</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">action_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor.min_duty", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor.min_duty", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int | None"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor.max_duty", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor.max_duty", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int | None"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor.default", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor.default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor.pins", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor.pins", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "slvrov_tools.pca9685.PCA9685_Device_Descriptor.action_header", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685_Device_Descriptor.action_header", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "slvrov_tools.pca9685.PCA9685", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685", "kind": "class", "doc": "<p>Class allowing basic use of the PCA9685 16-Channel, 12-bit PWM Driver.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>pwm_frequency (int):</strong>  The frequency (Hz) that the driver will output; max is 25_000_000.</li>\n<li><strong>address (int):</strong>  I2C address of the driver; default is 0x40.</li>\n<li><strong>bus (int):</strong>  I2C bus number; default is 1.</li>\n<li><strong>pwm_time (int):</strong>  The time (\u03bcs) it takes to complete one PWM cycle at pwm_frequency.</li>\n</ul>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>clear(): Clears the MODE1 register, allowing the oscillator to start.\n  write_prescale(): Calculates and writes the prescale that lowers the driver's clock frequency to the pwm frequency.\n  write_duty_cycle(pin_number: int, pulse_length: float, start: int=0): Writes when the \"on\" pulse starts and stops; default start is 0.</p>\n</blockquote>\n", "bases": "slvrov_tools.i2c_device.I2C_Device"}, {"fullname": "slvrov_tools.pca9685.PCA9685.__init__", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685.__init__", "kind": "function", "doc": "<p>Initializes PCA9685_BASIC object attributes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pwm_frequency (int):</strong>  the frequency (Hz) that the driver will output; max is 25_000_000.</li>\n<li><strong>address (int):</strong>  I2C address of the driver; default is 0x40.</li>\n<li><strong>bus (int):</strong>  I2C bus number; default is 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pwm_frequency</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>, </span><span class=\"param\"><span class=\"n\">bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "slvrov_tools.pca9685.PCA9685.frequency", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685.frequency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.PCA9685.clear", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685.clear", "kind": "function", "doc": "<p>Clears the MODE1 register, turning off the SLEEP bit and allowing the oscillator to start.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.pca9685.PCA9685.write_prescale", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685.write_prescale", "kind": "function", "doc": "<p>Calculates and writes the prescale that lowers the driver's clock frequency to the pwm frequency.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.pca9685.PCA9685.write_duty_cycle", "modulename": "slvrov_tools.pca9685", "qualname": "PCA9685.write_duty_cycle", "kind": "function", "doc": "<p>Writes when the \"on\" pulse starts and stops; default start is 0</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pin_number (int):</strong>  the desired pin number of the ouput on the PCA9685 driver, numbers 0 - 15</li>\n<li><strong>pulse_length (float):</strong>  the length of the \"on\" part of the PWM cycle (\u03bcs)</li>\n<li><strong>start (int):</strong>  how long into the PWM cycle to start the \"on\" signal (\u03bcs); default is 0</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If pin number is out of range.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pin_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">pulse_length</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slvrov_tools.pca9685.Motor", "modulename": "slvrov_tools.pca9685", "qualname": "Motor", "kind": "class", "doc": "<p>Class allowing the control over an ESC or servo through the PCA9685 PWM driver.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>pin (int):</strong>  the pin of the PCA8695 that the motor is on (0 - 15)</li>\n<li><strong>min_duty (int):</strong>  the length of the \"on\" pulse when the motor is at its minimum rotation (\u03bcs)</li>\n<li><strong>max_duty (int):</strong>  the length of the \"on\" pulse when the motor is at its maximum rotation (\u03bcs)</li>\n<li><strong>max_rotation (int):</strong>  the rotational range of the motor. This can be degrees for servos or 'levels' for motors (e.g. 100 fro 100% forward, 0 for 100% backwards)</li>\n<li><strong>driver (PCA9685):</strong>  PCA9685 driver being used to control the motor</li>\n</ul>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>rotate(degrees): rotate motor to specified level of motion</p>\n</blockquote>\n"}, {"fullname": "slvrov_tools.pca9685.Motor.__init__", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.__init__", "kind": "function", "doc": "<p>Initializes Servo object with its attributes and sets up prescale</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pin (int):</strong>  the pin of the PCA8695 driver that the motor is on (0 - 15)</li>\n<li><strong>min_duty (int):</strong>  the length of the \"on\" pulse when the motor is at its minimum rotation (\u03bcs)</li>\n<li><strong>max_duty (int):</strong>  the length of the \"on\" pulse when the motor is at its maximum rotation (\u03bcs)</li>\n<li><strong>max_rotation (int):</strong>  the rotational range of the motor (degrees); default is 180\u02da</li>\n<li><strong>pwm_frequency (int):</strong>  the frequency (Hz) that the driver will output; max is 25_000_000</li>\n<li><strong>address (int):</strong>  I2C address of the PCA9685; default is 0x40</li>\n<li><strong>bus (int):</strong>  I2C bus number of the driver; default is 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pin</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">min_duty</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_duty</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_rotation</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">pwm_frequency</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "slvrov_tools.pca9685.Motor.driver", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.driver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.Motor.pin", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.pin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.Motor.min_duty", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.min_duty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.Motor.max_duty", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.max_duty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.Motor.max_rotation", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.max_rotation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slvrov_tools.pca9685.Motor.rotate", "modulename": "slvrov_tools.pca9685", "qualname": "Motor.rotate", "kind": "function", "doc": "<p>Rotate motor to a specified level of movement.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level (float):</strong>  The amount of movement, ranging from 0 to the specified max_rotation. For motors, this would be the degree.</li>\n<li><strong>wait_time (int):</strong>  The time (in seconds) to wait in order to give the motor head to rotate if needed. Set to 0 by default.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">wait_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();